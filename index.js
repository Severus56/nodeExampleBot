const { Telegraf, Markup, Extra, Stage, session, Scenes} = require('telegraf');
const dotenvConf = require('dotenv').config();
const startGameScene = require('./Scenes/game')
const startCasinoScene = require('./Scenes/casino')
const sequelize = require('./DB/db');
const UserModel = require('./DB/models')
const {gamesMenu} = require("./Buttons/options");


const bot = new Telegraf(process.env.TOKEN);
const stage = new Scenes.Stage([startGameScene, startCasinoScene])



const main = async (ctx) =>{
    try{
        await sequelize.authenticate()
        await sequelize.sync()

    } catch (e) {
        console.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${e}`)
    }

    bot.start(async (ctx) => {
        const chatId = ctx.chat.id
        const user = await UserModel.findOne({
            where: {
                chatId
            }
        })
        if(!user){
            await UserModel.create({chatId})
            ctx.reply(`üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.message.from.first_name ? ctx.message.from.first_name : ctx.message.from.last_name}! –¢—ã –≤–ø–µ—Ä–≤—ã–µ –∑–∞—à–µ–ª –≤ –±–æ—Ç–∞, —Ä–∞–¥—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è!`)
        }
        else if(user){
            ctx.reply(`üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${ctx.message.from.first_name ? ctx.message.from.first_name : ctx.message.from.last_name}`)
        }
    });


    bot.use(session())
    bot.use(stage.middleware())


    bot.command('info', async(ctx) => {
        const chatId = ctx.chat.id
        const user = await UserModel.findOne({
            where: {
                chatId
            }
        })

        ctx.replyWithHTML(
            `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ<b>–ü—Ä–æ—Ñ–∏–ª—å</b>‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n
         –¢–≤–æ–π –Ω–∏–∫–Ω–µ–π–º: ${ctx.from.first_name}\n
         –ü—Ä–µ–º–∏—É–º: ${ctx.from.is_premium ? '–ï—Å—Ç—å ‚úîÔ∏è' : '–ù–µ—Ç ‚úñÔ∏è'}\n
 ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñüìä<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>üìä‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n
       ‚úî –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: ${user.right}\n
       ‚úñ –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: ${user.notRight}\n
       üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: ${user.right + user.notRight}\n
       üíµ –ë–∞–ª–∞–Ω—Å: ${user.balance}\n
üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞`)
    })

    bot.command('log', async(ctx) => {
        const chatId = ctx.message.chat.id
        if(chatId == process.env.ADMIN){
            ctx.reply(`${chatId}`)
            console.log(chatId)
        }
        else{
            ctx.reply('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
        }
    })

    bot.command('game', async(ctx) => {
        ctx.scene.enter('startGame')
    })

    bot.command('casino', async(ctx) => {
        ctx.scene.enter('startCasino')
    })

    bot.command('gameslist', async(ctx) => {
        ctx.reply('–°–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –∏–≥—Ä', gamesMenu)
        bot.action('startGameFromButton', async(ctx) => {
            await ctx.answerCbQuery()
            ctx.scene.enter('startGame')
        })
        bot.action('startCasinoFromButton', async(ctx) => {
            await ctx.answerCbQuery()
            ctx.scene.enter('startCasino')
        })
    })

    bot.launch();
}
    main()

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));